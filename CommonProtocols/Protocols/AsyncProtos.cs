// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Com.Virtuos.Rocket.NetworkMessage {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class AsyncProtos {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      registry.Add(global::Com.Virtuos.Rocket.NetworkMessage.ActionCommitedRequest.RequestNumber);
      registry.Add(global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest.RequestNumber);
      registry.Add(global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectedRequest.RequestNumber);
      registry.Add(global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectionErrorRequest.RequestNumber);
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_virtuos_ActionCommitedRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Com.Virtuos.Rocket.NetworkMessage.ActionCommitedRequest, global::Com.Virtuos.Rocket.NetworkMessage.ActionCommitedRequest.Builder> internal__static_virtuos_ActionCommitedRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_virtuos_AsyncAuthRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest, global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest.Builder> internal__static_virtuos_AsyncAuthRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_virtuos_AsyncAuthRequest_UserAgent__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest.Types.UserAgent, global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest.Types.UserAgent.Builder> internal__static_virtuos_AsyncAuthRequest_UserAgent__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_virtuos_AsyncConnectedRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectedRequest, global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectedRequest.Builder> internal__static_virtuos_AsyncConnectedRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_virtuos_AsyncConnectionErrorRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectionErrorRequest, global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectionErrorRequest.Builder> internal__static_virtuos_AsyncConnectionErrorRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_virtuos_Session__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Com.Virtuos.Rocket.NetworkMessage.Session, global::Com.Virtuos.Rocket.NetworkMessage.Session.Builder> internal__static_virtuos_Session__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static AsyncProtos() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChN2aXJ0dW9zL2FzeW5jLnByb3RvEgd2aXJ0dW9zGiRnb29nbGUvcHJvdG9i", 
            "dWYvY3NoYXJwX29wdGlvbnMucHJvdG8aFHZpcnR1b3MvY29tbW9uLnByb3Rv", 
            "GhJ2aXJ0dW9zL3B1c2gucHJvdG8aEnZpcnR1b3MvZ2FtZS5wcm90byKHAQoV", 
            "QWN0aW9uQ29tbWl0ZWRSZXF1ZXN0Eg8KB2dhbWVfaWQYAiABKAMSEgoKdHVy", 
            "bl9pbmRleBgDIAEoBTJJCg5yZXF1ZXN0X251bWJlchIQLnZpcnR1b3MuTWVz", 
            "c2FnZRiLBCABKAsyHi52aXJ0dW9zLkFjdGlvbkNvbW1pdGVkUmVxdWVzdCLw", 
            "AgoQQXN5bmNBdXRoUmVxdWVzdBIMCgRuYW1lGAIgASgJEgwKBHBhc3MYAyAB", 
            "KAkSLAoNcGFydG5lcl90b2tlbhgEIAEoCzIVLnZpcnR1b3MuUGFydG5lclRv", 
            "a2VuEjcKCnVzZXJfYWdlbnQYBSABKAsyIy52aXJ0dW9zLkFzeW5jQXV0aFJl", 
            "cXVlc3QuVXNlckFnZW50EiEKB3Nlc3Npb24YBiABKAsyEC52aXJ0dW9zLlNl", 
            "c3Npb24SEQoJZ2FtZV90eXBlGAcgASgJEiMKBmRldmljZRgIIAEoCzITLnZp", 
            "cnR1b3MuRGV2aWNlVHlwZRo4CglVc2VyQWdlbnQSEgoKdXNlcl9hZ2VudBgB", 
            "IAEoCRIXCg9mdWxsX3VzZXJfYWdlbnQYAiABKAkyRAoOcmVxdWVzdF9udW1i", 
            "ZXISEC52aXJ0dW9zLk1lc3NhZ2UYkAMgASgLMhkudmlydHVvcy5Bc3luY0F1", 
            "dGhSZXF1ZXN0IqgBChVBc3luY0Nvbm5lY3RlZFJlcXVlc3QSIQoHc2Vzc2lv", 
            "bhgCIAEoCzIQLnZpcnR1b3MuU2Vzc2lvbhIhCghvcHRpb25hbBgDIAEoCzIP", 
            "LnZpcnR1b3MuUGxheWVyMkkKDnJlcXVlc3RfbnVtYmVyEhAudmlydHVvcy5N", 
            "ZXNzYWdlGJYDIAEoCzIeLnZpcnR1b3MuQXN5bmNDb25uZWN0ZWRSZXF1ZXN0", 
            "IuACChtBc3luY0Nvbm5lY3Rpb25FcnJvclJlcXVlc3QSQgoEY29kZRgCIAEo", 
            "DjI0LnZpcnR1b3MuQXN5bmNDb25uZWN0aW9uRXJyb3JSZXF1ZXN0LkNvbm5l", 
            "Y3Rpb25FcnJvciKrAQoPQ29ubmVjdGlvbkVycm9yEgsKB1VOS05PV04QABIR", 
            "Cg1BQ0NFU1NfREVOSUVEEAESFAoQU0VSVkVSRlVMTF9FUlJPUhACEhQKEE1B", 
            "SU5URU5BTkNFX01PREUQAxIXChNORUVEX0FVVEhFTlRJQ0FUSU9OEAQSFQoR", 
            "VU5LTk9XTl9HQU1FX1RZUEUQBRIQCgxTRVJWRVJfRVJST1IQBhIKCgZCQU5O", 
            "RUQQBzJPCg5yZXF1ZXN0X251bWJlchIQLnZpcnR1b3MuTWVzc2FnZRiXAyAB", 
            "KAsyJC52aXJ0dW9zLkFzeW5jQ29ubmVjdGlvbkVycm9yUmVxdWVzdCIVCgdT", 
            "ZXNzaW9uEgoKAmlkGAEgASgDQjVIAcI+MAohQ29tLlZpcnR1b3MuUm9ja2V0", 
          "Lk5ldHdvcmtNZXNzYWdlEgtBc3luY1Byb3Rvcw=="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_virtuos_ActionCommitedRequest__Descriptor = Descriptor.MessageTypes[0];
        internal__static_virtuos_ActionCommitedRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Com.Virtuos.Rocket.NetworkMessage.ActionCommitedRequest, global::Com.Virtuos.Rocket.NetworkMessage.ActionCommitedRequest.Builder>(internal__static_virtuos_ActionCommitedRequest__Descriptor,
                new string[] { "GameId", "TurnIndex", });
        global::Com.Virtuos.Rocket.NetworkMessage.ActionCommitedRequest.RequestNumber = pb::GeneratedSingleExtension<global::Com.Virtuos.Rocket.NetworkMessage.ActionCommitedRequest>.CreateInstance(global::Com.Virtuos.Rocket.NetworkMessage.ActionCommitedRequest.Descriptor.Extensions[0]);
        internal__static_virtuos_AsyncAuthRequest__Descriptor = Descriptor.MessageTypes[1];
        internal__static_virtuos_AsyncAuthRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest, global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest.Builder>(internal__static_virtuos_AsyncAuthRequest__Descriptor,
                new string[] { "Name", "Pass", "PartnerToken", "UserAgent", "Session", "GameType", "Device", });
        internal__static_virtuos_AsyncAuthRequest_UserAgent__Descriptor = internal__static_virtuos_AsyncAuthRequest__Descriptor.NestedTypes[0];
        internal__static_virtuos_AsyncAuthRequest_UserAgent__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest.Types.UserAgent, global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest.Types.UserAgent.Builder>(internal__static_virtuos_AsyncAuthRequest_UserAgent__Descriptor,
                new string[] { "UserAgent_", "FullUserAgent", });
        global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest.RequestNumber = pb::GeneratedSingleExtension<global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest>.CreateInstance(global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest.Descriptor.Extensions[0]);
        internal__static_virtuos_AsyncConnectedRequest__Descriptor = Descriptor.MessageTypes[2];
        internal__static_virtuos_AsyncConnectedRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectedRequest, global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectedRequest.Builder>(internal__static_virtuos_AsyncConnectedRequest__Descriptor,
                new string[] { "Session", "Optional", });
        global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectedRequest.RequestNumber = pb::GeneratedSingleExtension<global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectedRequest>.CreateInstance(global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectedRequest.Descriptor.Extensions[0]);
        internal__static_virtuos_AsyncConnectionErrorRequest__Descriptor = Descriptor.MessageTypes[3];
        internal__static_virtuos_AsyncConnectionErrorRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectionErrorRequest, global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectionErrorRequest.Builder>(internal__static_virtuos_AsyncConnectionErrorRequest__Descriptor,
                new string[] { "Code", });
        global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectionErrorRequest.RequestNumber = pb::GeneratedSingleExtension<global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectionErrorRequest>.CreateInstance(global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectionErrorRequest.Descriptor.Extensions[0]);
        internal__static_virtuos_Session__Descriptor = Descriptor.MessageTypes[4];
        internal__static_virtuos_Session__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Com.Virtuos.Rocket.NetworkMessage.Session, global::Com.Virtuos.Rocket.NetworkMessage.Session.Builder>(internal__static_virtuos_Session__Descriptor,
                new string[] { "Id", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.RegisterAllExtensions(registry);
        global::Com.Virtuos.Rocket.NetworkMessage.CommonProtos.RegisterAllExtensions(registry);
        global::Com.Virtuos.Rocket.NetworkMessage.PushProtos.RegisterAllExtensions(registry);
        global::Com.Virtuos.Rocket.NetworkMessage.GameProtos.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.Descriptor, 
          global::Com.Virtuos.Rocket.NetworkMessage.CommonProtos.Descriptor, 
          global::Com.Virtuos.Rocket.NetworkMessage.PushProtos.Descriptor, 
          global::Com.Virtuos.Rocket.NetworkMessage.GameProtos.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ActionCommitedRequest : pb::GeneratedMessage<ActionCommitedRequest, ActionCommitedRequest.Builder> {
    private ActionCommitedRequest() { }
    private static readonly ActionCommitedRequest defaultInstance = new ActionCommitedRequest().MakeReadOnly();
    private static readonly string[] _actionCommitedRequestFieldNames = new string[] { "game_id", "turn_index" };
    private static readonly uint[] _actionCommitedRequestFieldTags = new uint[] { 16, 24 };
    public static ActionCommitedRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ActionCommitedRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ActionCommitedRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Com.Virtuos.Rocket.NetworkMessage.AsyncProtos.internal__static_virtuos_ActionCommitedRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ActionCommitedRequest, ActionCommitedRequest.Builder> InternalFieldAccessors {
      get { return global::Com.Virtuos.Rocket.NetworkMessage.AsyncProtos.internal__static_virtuos_ActionCommitedRequest__FieldAccessorTable; }
    }
    
    public const int RequestNumberFieldNumber = 523;
    public static pb::GeneratedExtensionBase<global::Com.Virtuos.Rocket.NetworkMessage.ActionCommitedRequest> RequestNumber;
    public const int GameIdFieldNumber = 2;
    private bool hasGameId;
    private long gameId_;
    public bool HasGameId {
      get { return hasGameId; }
    }
    public long GameId {
      get { return gameId_; }
    }
    
    public const int TurnIndexFieldNumber = 3;
    private bool hasTurnIndex;
    private int turnIndex_;
    public bool HasTurnIndex {
      get { return hasTurnIndex; }
    }
    public int TurnIndex {
      get { return turnIndex_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _actionCommitedRequestFieldNames;
      if (hasGameId) {
        output.WriteInt64(2, field_names[0], GameId);
      }
      if (hasTurnIndex) {
        output.WriteInt32(3, field_names[1], TurnIndex);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGameId) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, GameId);
      }
      if (hasTurnIndex) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, TurnIndex);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ActionCommitedRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ActionCommitedRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ActionCommitedRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ActionCommitedRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ActionCommitedRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ActionCommitedRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ActionCommitedRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ActionCommitedRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ActionCommitedRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ActionCommitedRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ActionCommitedRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ActionCommitedRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ActionCommitedRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ActionCommitedRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ActionCommitedRequest result;
      
      private ActionCommitedRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ActionCommitedRequest original = result;
          result = new ActionCommitedRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ActionCommitedRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Com.Virtuos.Rocket.NetworkMessage.ActionCommitedRequest.Descriptor; }
      }
      
      public override ActionCommitedRequest DefaultInstanceForType {
        get { return global::Com.Virtuos.Rocket.NetworkMessage.ActionCommitedRequest.DefaultInstance; }
      }
      
      public override ActionCommitedRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ActionCommitedRequest) {
          return MergeFrom((ActionCommitedRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ActionCommitedRequest other) {
        if (other == global::Com.Virtuos.Rocket.NetworkMessage.ActionCommitedRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameId) {
          GameId = other.GameId;
        }
        if (other.HasTurnIndex) {
          TurnIndex = other.TurnIndex;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_actionCommitedRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _actionCommitedRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 16: {
              result.hasGameId = input.ReadInt64(ref result.gameId_);
              break;
            }
            case 24: {
              result.hasTurnIndex = input.ReadInt32(ref result.turnIndex_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameId {
        get { return result.hasGameId; }
      }
      public long GameId {
        get { return result.GameId; }
        set { SetGameId(value); }
      }
      public Builder SetGameId(long value) {
        PrepareBuilder();
        result.hasGameId = true;
        result.gameId_ = value;
        return this;
      }
      public Builder ClearGameId() {
        PrepareBuilder();
        result.hasGameId = false;
        result.gameId_ = 0L;
        return this;
      }
      
      public bool HasTurnIndex {
        get { return result.hasTurnIndex; }
      }
      public int TurnIndex {
        get { return result.TurnIndex; }
        set { SetTurnIndex(value); }
      }
      public Builder SetTurnIndex(int value) {
        PrepareBuilder();
        result.hasTurnIndex = true;
        result.turnIndex_ = value;
        return this;
      }
      public Builder ClearTurnIndex() {
        PrepareBuilder();
        result.hasTurnIndex = false;
        result.turnIndex_ = 0;
        return this;
      }
    }
    static ActionCommitedRequest() {
      object.ReferenceEquals(global::Com.Virtuos.Rocket.NetworkMessage.AsyncProtos.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AsyncAuthRequest : pb::GeneratedMessage<AsyncAuthRequest, AsyncAuthRequest.Builder> {
    private AsyncAuthRequest() { }
    private static readonly AsyncAuthRequest defaultInstance = new AsyncAuthRequest().MakeReadOnly();
    private static readonly string[] _asyncAuthRequestFieldNames = new string[] { "device", "game_type", "name", "partner_token", "pass", "session", "user_agent" };
    private static readonly uint[] _asyncAuthRequestFieldTags = new uint[] { 66, 58, 18, 34, 26, 50, 42 };
    public static AsyncAuthRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AsyncAuthRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AsyncAuthRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Com.Virtuos.Rocket.NetworkMessage.AsyncProtos.internal__static_virtuos_AsyncAuthRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AsyncAuthRequest, AsyncAuthRequest.Builder> InternalFieldAccessors {
      get { return global::Com.Virtuos.Rocket.NetworkMessage.AsyncProtos.internal__static_virtuos_AsyncAuthRequest__FieldAccessorTable; }
    }
    
    public const int RequestNumberFieldNumber = 400;
    public static pb::GeneratedExtensionBase<global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest> RequestNumber;
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class UserAgent : pb::GeneratedMessage<UserAgent, UserAgent.Builder> {
        private UserAgent() { }
        private static readonly UserAgent defaultInstance = new UserAgent().MakeReadOnly();
        private static readonly string[] _userAgentFieldNames = new string[] { "full_user_agent", "user_agent" };
        private static readonly uint[] _userAgentFieldTags = new uint[] { 18, 10 };
        public static UserAgent DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override UserAgent DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override UserAgent ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Com.Virtuos.Rocket.NetworkMessage.AsyncProtos.internal__static_virtuos_AsyncAuthRequest_UserAgent__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<UserAgent, UserAgent.Builder> InternalFieldAccessors {
          get { return global::Com.Virtuos.Rocket.NetworkMessage.AsyncProtos.internal__static_virtuos_AsyncAuthRequest_UserAgent__FieldAccessorTable; }
        }
        
        public const int UserAgent_FieldNumber = 1;
        private bool hasUserAgent_;
        private string userAgent_ = "";
        public bool HasUserAgent_ {
          get { return hasUserAgent_; }
        }
        public string UserAgent_ {
          get { return userAgent_; }
        }
        
        public const int FullUserAgentFieldNumber = 2;
        private bool hasFullUserAgent;
        private string fullUserAgent_ = "";
        public bool HasFullUserAgent {
          get { return hasFullUserAgent; }
        }
        public string FullUserAgent {
          get { return fullUserAgent_; }
        }
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _userAgentFieldNames;
          if (hasUserAgent_) {
            output.WriteString(1, field_names[1], UserAgent_);
          }
          if (hasFullUserAgent) {
            output.WriteString(2, field_names[0], FullUserAgent);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasUserAgent_) {
            size += pb::CodedOutputStream.ComputeStringSize(1, UserAgent_);
          }
          if (hasFullUserAgent) {
            size += pb::CodedOutputStream.ComputeStringSize(2, FullUserAgent);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static UserAgent ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static UserAgent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static UserAgent ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static UserAgent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static UserAgent ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static UserAgent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static UserAgent ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static UserAgent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static UserAgent ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static UserAgent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private UserAgent MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(UserAgent prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<UserAgent, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(UserAgent cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private UserAgent result;
          
          private UserAgent PrepareBuilder() {
            if (resultIsReadOnly) {
              UserAgent original = result;
              result = new UserAgent();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override UserAgent MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest.Types.UserAgent.Descriptor; }
          }
          
          public override UserAgent DefaultInstanceForType {
            get { return global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest.Types.UserAgent.DefaultInstance; }
          }
          
          public override UserAgent BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is UserAgent) {
              return MergeFrom((UserAgent) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(UserAgent other) {
            if (other == global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest.Types.UserAgent.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasUserAgent_) {
              UserAgent_ = other.UserAgent_;
            }
            if (other.HasFullUserAgent) {
              FullUserAgent = other.FullUserAgent;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_userAgentFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _userAgentFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasUserAgent_ = input.ReadString(ref result.userAgent_);
                  break;
                }
                case 18: {
                  result.hasFullUserAgent = input.ReadString(ref result.fullUserAgent_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasUserAgent_ {
            get { return result.hasUserAgent_; }
          }
          public string UserAgent_ {
            get { return result.UserAgent_; }
            set { SetUserAgent_(value); }
          }
          public Builder SetUserAgent_(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasUserAgent_ = true;
            result.userAgent_ = value;
            return this;
          }
          public Builder ClearUserAgent_() {
            PrepareBuilder();
            result.hasUserAgent_ = false;
            result.userAgent_ = "";
            return this;
          }
          
          public bool HasFullUserAgent {
            get { return result.hasFullUserAgent; }
          }
          public string FullUserAgent {
            get { return result.FullUserAgent; }
            set { SetFullUserAgent(value); }
          }
          public Builder SetFullUserAgent(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasFullUserAgent = true;
            result.fullUserAgent_ = value;
            return this;
          }
          public Builder ClearFullUserAgent() {
            PrepareBuilder();
            result.hasFullUserAgent = false;
            result.fullUserAgent_ = "";
            return this;
          }
        }
        static UserAgent() {
          object.ReferenceEquals(global::Com.Virtuos.Rocket.NetworkMessage.AsyncProtos.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int PassFieldNumber = 3;
    private bool hasPass;
    private string pass_ = "";
    public bool HasPass {
      get { return hasPass; }
    }
    public string Pass {
      get { return pass_; }
    }
    
    public const int PartnerTokenFieldNumber = 4;
    private bool hasPartnerToken;
    private global::Com.Virtuos.Rocket.NetworkMessage.PartnerToken partnerToken_;
    public bool HasPartnerToken {
      get { return hasPartnerToken; }
    }
    public global::Com.Virtuos.Rocket.NetworkMessage.PartnerToken PartnerToken {
      get { return partnerToken_ ?? global::Com.Virtuos.Rocket.NetworkMessage.PartnerToken.DefaultInstance; }
    }
    
    public const int UserAgentFieldNumber = 5;
    private bool hasUserAgent;
    private global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest.Types.UserAgent userAgent_;
    public bool HasUserAgent {
      get { return hasUserAgent; }
    }
    public global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest.Types.UserAgent UserAgent {
      get { return userAgent_ ?? global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest.Types.UserAgent.DefaultInstance; }
    }
    
    public const int SessionFieldNumber = 6;
    private bool hasSession;
    private global::Com.Virtuos.Rocket.NetworkMessage.Session session_;
    public bool HasSession {
      get { return hasSession; }
    }
    public global::Com.Virtuos.Rocket.NetworkMessage.Session Session {
      get { return session_ ?? global::Com.Virtuos.Rocket.NetworkMessage.Session.DefaultInstance; }
    }
    
    public const int GameTypeFieldNumber = 7;
    private bool hasGameType;
    private string gameType_ = "";
    public bool HasGameType {
      get { return hasGameType; }
    }
    public string GameType {
      get { return gameType_; }
    }
    
    public const int DeviceFieldNumber = 8;
    private bool hasDevice;
    private global::Com.Virtuos.Rocket.NetworkMessage.DeviceType device_;
    public bool HasDevice {
      get { return hasDevice; }
    }
    public global::Com.Virtuos.Rocket.NetworkMessage.DeviceType Device {
      get { return device_ ?? global::Com.Virtuos.Rocket.NetworkMessage.DeviceType.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasDevice) {
          if (!Device.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _asyncAuthRequestFieldNames;
      if (hasName) {
        output.WriteString(2, field_names[2], Name);
      }
      if (hasPass) {
        output.WriteString(3, field_names[4], Pass);
      }
      if (hasPartnerToken) {
        output.WriteMessage(4, field_names[3], PartnerToken);
      }
      if (hasUserAgent) {
        output.WriteMessage(5, field_names[6], UserAgent);
      }
      if (hasSession) {
        output.WriteMessage(6, field_names[5], Session);
      }
      if (hasGameType) {
        output.WriteString(7, field_names[1], GameType);
      }
      if (hasDevice) {
        output.WriteMessage(8, field_names[0], Device);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (hasPass) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Pass);
      }
      if (hasPartnerToken) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, PartnerToken);
      }
      if (hasUserAgent) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, UserAgent);
      }
      if (hasSession) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, Session);
      }
      if (hasGameType) {
        size += pb::CodedOutputStream.ComputeStringSize(7, GameType);
      }
      if (hasDevice) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, Device);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static AsyncAuthRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AsyncAuthRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AsyncAuthRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AsyncAuthRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AsyncAuthRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AsyncAuthRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AsyncAuthRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AsyncAuthRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AsyncAuthRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AsyncAuthRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AsyncAuthRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AsyncAuthRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AsyncAuthRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AsyncAuthRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AsyncAuthRequest result;
      
      private AsyncAuthRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          AsyncAuthRequest original = result;
          result = new AsyncAuthRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AsyncAuthRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest.Descriptor; }
      }
      
      public override AsyncAuthRequest DefaultInstanceForType {
        get { return global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest.DefaultInstance; }
      }
      
      public override AsyncAuthRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AsyncAuthRequest) {
          return MergeFrom((AsyncAuthRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AsyncAuthRequest other) {
        if (other == global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasPass) {
          Pass = other.Pass;
        }
        if (other.HasPartnerToken) {
          MergePartnerToken(other.PartnerToken);
        }
        if (other.HasUserAgent) {
          MergeUserAgent(other.UserAgent);
        }
        if (other.HasSession) {
          MergeSession(other.Session);
        }
        if (other.HasGameType) {
          GameType = other.GameType;
        }
        if (other.HasDevice) {
          MergeDevice(other.Device);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_asyncAuthRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _asyncAuthRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              result.hasPass = input.ReadString(ref result.pass_);
              break;
            }
            case 34: {
              global::Com.Virtuos.Rocket.NetworkMessage.PartnerToken.Builder subBuilder = global::Com.Virtuos.Rocket.NetworkMessage.PartnerToken.CreateBuilder();
              if (result.hasPartnerToken) {
                subBuilder.MergeFrom(PartnerToken);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PartnerToken = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest.Types.UserAgent.Builder subBuilder = global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest.Types.UserAgent.CreateBuilder();
              if (result.hasUserAgent) {
                subBuilder.MergeFrom(UserAgent);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserAgent = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::Com.Virtuos.Rocket.NetworkMessage.Session.Builder subBuilder = global::Com.Virtuos.Rocket.NetworkMessage.Session.CreateBuilder();
              if (result.hasSession) {
                subBuilder.MergeFrom(Session);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Session = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              result.hasGameType = input.ReadString(ref result.gameType_);
              break;
            }
            case 66: {
              global::Com.Virtuos.Rocket.NetworkMessage.DeviceType.Builder subBuilder = global::Com.Virtuos.Rocket.NetworkMessage.DeviceType.CreateBuilder();
              if (result.hasDevice) {
                subBuilder.MergeFrom(Device);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Device = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasPass {
        get { return result.hasPass; }
      }
      public string Pass {
        get { return result.Pass; }
        set { SetPass(value); }
      }
      public Builder SetPass(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPass = true;
        result.pass_ = value;
        return this;
      }
      public Builder ClearPass() {
        PrepareBuilder();
        result.hasPass = false;
        result.pass_ = "";
        return this;
      }
      
      public bool HasPartnerToken {
       get { return result.hasPartnerToken; }
      }
      public global::Com.Virtuos.Rocket.NetworkMessage.PartnerToken PartnerToken {
        get { return result.PartnerToken; }
        set { SetPartnerToken(value); }
      }
      public Builder SetPartnerToken(global::Com.Virtuos.Rocket.NetworkMessage.PartnerToken value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPartnerToken = true;
        result.partnerToken_ = value;
        return this;
      }
      public Builder SetPartnerToken(global::Com.Virtuos.Rocket.NetworkMessage.PartnerToken.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPartnerToken = true;
        result.partnerToken_ = builderForValue.Build();
        return this;
      }
      public Builder MergePartnerToken(global::Com.Virtuos.Rocket.NetworkMessage.PartnerToken value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPartnerToken &&
            result.partnerToken_ != global::Com.Virtuos.Rocket.NetworkMessage.PartnerToken.DefaultInstance) {
            result.partnerToken_ = global::Com.Virtuos.Rocket.NetworkMessage.PartnerToken.CreateBuilder(result.partnerToken_).MergeFrom(value).BuildPartial();
        } else {
          result.partnerToken_ = value;
        }
        result.hasPartnerToken = true;
        return this;
      }
      public Builder ClearPartnerToken() {
        PrepareBuilder();
        result.hasPartnerToken = false;
        result.partnerToken_ = null;
        return this;
      }
      
      public bool HasUserAgent {
       get { return result.hasUserAgent; }
      }
      public global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest.Types.UserAgent UserAgent {
        get { return result.UserAgent; }
        set { SetUserAgent(value); }
      }
      public Builder SetUserAgent(global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest.Types.UserAgent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserAgent = true;
        result.userAgent_ = value;
        return this;
      }
      public Builder SetUserAgent(global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest.Types.UserAgent.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserAgent = true;
        result.userAgent_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserAgent(global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest.Types.UserAgent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserAgent &&
            result.userAgent_ != global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest.Types.UserAgent.DefaultInstance) {
            result.userAgent_ = global::Com.Virtuos.Rocket.NetworkMessage.AsyncAuthRequest.Types.UserAgent.CreateBuilder(result.userAgent_).MergeFrom(value).BuildPartial();
        } else {
          result.userAgent_ = value;
        }
        result.hasUserAgent = true;
        return this;
      }
      public Builder ClearUserAgent() {
        PrepareBuilder();
        result.hasUserAgent = false;
        result.userAgent_ = null;
        return this;
      }
      
      public bool HasSession {
       get { return result.hasSession; }
      }
      public global::Com.Virtuos.Rocket.NetworkMessage.Session Session {
        get { return result.Session; }
        set { SetSession(value); }
      }
      public Builder SetSession(global::Com.Virtuos.Rocket.NetworkMessage.Session value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSession = true;
        result.session_ = value;
        return this;
      }
      public Builder SetSession(global::Com.Virtuos.Rocket.NetworkMessage.Session.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSession = true;
        result.session_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSession(global::Com.Virtuos.Rocket.NetworkMessage.Session value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSession &&
            result.session_ != global::Com.Virtuos.Rocket.NetworkMessage.Session.DefaultInstance) {
            result.session_ = global::Com.Virtuos.Rocket.NetworkMessage.Session.CreateBuilder(result.session_).MergeFrom(value).BuildPartial();
        } else {
          result.session_ = value;
        }
        result.hasSession = true;
        return this;
      }
      public Builder ClearSession() {
        PrepareBuilder();
        result.hasSession = false;
        result.session_ = null;
        return this;
      }
      
      public bool HasGameType {
        get { return result.hasGameType; }
      }
      public string GameType {
        get { return result.GameType; }
        set { SetGameType(value); }
      }
      public Builder SetGameType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameType = true;
        result.gameType_ = value;
        return this;
      }
      public Builder ClearGameType() {
        PrepareBuilder();
        result.hasGameType = false;
        result.gameType_ = "";
        return this;
      }
      
      public bool HasDevice {
       get { return result.hasDevice; }
      }
      public global::Com.Virtuos.Rocket.NetworkMessage.DeviceType Device {
        get { return result.Device; }
        set { SetDevice(value); }
      }
      public Builder SetDevice(global::Com.Virtuos.Rocket.NetworkMessage.DeviceType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDevice = true;
        result.device_ = value;
        return this;
      }
      public Builder SetDevice(global::Com.Virtuos.Rocket.NetworkMessage.DeviceType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDevice = true;
        result.device_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDevice(global::Com.Virtuos.Rocket.NetworkMessage.DeviceType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDevice &&
            result.device_ != global::Com.Virtuos.Rocket.NetworkMessage.DeviceType.DefaultInstance) {
            result.device_ = global::Com.Virtuos.Rocket.NetworkMessage.DeviceType.CreateBuilder(result.device_).MergeFrom(value).BuildPartial();
        } else {
          result.device_ = value;
        }
        result.hasDevice = true;
        return this;
      }
      public Builder ClearDevice() {
        PrepareBuilder();
        result.hasDevice = false;
        result.device_ = null;
        return this;
      }
    }
    static AsyncAuthRequest() {
      object.ReferenceEquals(global::Com.Virtuos.Rocket.NetworkMessage.AsyncProtos.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AsyncConnectedRequest : pb::GeneratedMessage<AsyncConnectedRequest, AsyncConnectedRequest.Builder> {
    private AsyncConnectedRequest() { }
    private static readonly AsyncConnectedRequest defaultInstance = new AsyncConnectedRequest().MakeReadOnly();
    private static readonly string[] _asyncConnectedRequestFieldNames = new string[] { "optional", "session" };
    private static readonly uint[] _asyncConnectedRequestFieldTags = new uint[] { 26, 18 };
    public static AsyncConnectedRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AsyncConnectedRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AsyncConnectedRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Com.Virtuos.Rocket.NetworkMessage.AsyncProtos.internal__static_virtuos_AsyncConnectedRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AsyncConnectedRequest, AsyncConnectedRequest.Builder> InternalFieldAccessors {
      get { return global::Com.Virtuos.Rocket.NetworkMessage.AsyncProtos.internal__static_virtuos_AsyncConnectedRequest__FieldAccessorTable; }
    }
    
    public const int RequestNumberFieldNumber = 406;
    public static pb::GeneratedExtensionBase<global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectedRequest> RequestNumber;
    public const int SessionFieldNumber = 2;
    private bool hasSession;
    private global::Com.Virtuos.Rocket.NetworkMessage.Session session_;
    public bool HasSession {
      get { return hasSession; }
    }
    public global::Com.Virtuos.Rocket.NetworkMessage.Session Session {
      get { return session_ ?? global::Com.Virtuos.Rocket.NetworkMessage.Session.DefaultInstance; }
    }
    
    public const int OptionalFieldNumber = 3;
    private bool hasOptional;
    private global::Com.Virtuos.Rocket.NetworkMessage.Player optional_;
    public bool HasOptional {
      get { return hasOptional; }
    }
    public global::Com.Virtuos.Rocket.NetworkMessage.Player Optional {
      get { return optional_ ?? global::Com.Virtuos.Rocket.NetworkMessage.Player.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasOptional) {
          if (!Optional.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _asyncConnectedRequestFieldNames;
      if (hasSession) {
        output.WriteMessage(2, field_names[1], Session);
      }
      if (hasOptional) {
        output.WriteMessage(3, field_names[0], Optional);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSession) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Session);
      }
      if (hasOptional) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Optional);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static AsyncConnectedRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AsyncConnectedRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AsyncConnectedRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AsyncConnectedRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AsyncConnectedRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AsyncConnectedRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AsyncConnectedRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AsyncConnectedRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AsyncConnectedRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AsyncConnectedRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AsyncConnectedRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AsyncConnectedRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AsyncConnectedRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AsyncConnectedRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AsyncConnectedRequest result;
      
      private AsyncConnectedRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          AsyncConnectedRequest original = result;
          result = new AsyncConnectedRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AsyncConnectedRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectedRequest.Descriptor; }
      }
      
      public override AsyncConnectedRequest DefaultInstanceForType {
        get { return global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectedRequest.DefaultInstance; }
      }
      
      public override AsyncConnectedRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AsyncConnectedRequest) {
          return MergeFrom((AsyncConnectedRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AsyncConnectedRequest other) {
        if (other == global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectedRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSession) {
          MergeSession(other.Session);
        }
        if (other.HasOptional) {
          MergeOptional(other.Optional);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_asyncConnectedRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _asyncConnectedRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 18: {
              global::Com.Virtuos.Rocket.NetworkMessage.Session.Builder subBuilder = global::Com.Virtuos.Rocket.NetworkMessage.Session.CreateBuilder();
              if (result.hasSession) {
                subBuilder.MergeFrom(Session);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Session = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Com.Virtuos.Rocket.NetworkMessage.Player.Builder subBuilder = global::Com.Virtuos.Rocket.NetworkMessage.Player.CreateBuilder();
              if (result.hasOptional) {
                subBuilder.MergeFrom(Optional);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Optional = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSession {
       get { return result.hasSession; }
      }
      public global::Com.Virtuos.Rocket.NetworkMessage.Session Session {
        get { return result.Session; }
        set { SetSession(value); }
      }
      public Builder SetSession(global::Com.Virtuos.Rocket.NetworkMessage.Session value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSession = true;
        result.session_ = value;
        return this;
      }
      public Builder SetSession(global::Com.Virtuos.Rocket.NetworkMessage.Session.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSession = true;
        result.session_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSession(global::Com.Virtuos.Rocket.NetworkMessage.Session value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSession &&
            result.session_ != global::Com.Virtuos.Rocket.NetworkMessage.Session.DefaultInstance) {
            result.session_ = global::Com.Virtuos.Rocket.NetworkMessage.Session.CreateBuilder(result.session_).MergeFrom(value).BuildPartial();
        } else {
          result.session_ = value;
        }
        result.hasSession = true;
        return this;
      }
      public Builder ClearSession() {
        PrepareBuilder();
        result.hasSession = false;
        result.session_ = null;
        return this;
      }
      
      public bool HasOptional {
       get { return result.hasOptional; }
      }
      public global::Com.Virtuos.Rocket.NetworkMessage.Player Optional {
        get { return result.Optional; }
        set { SetOptional(value); }
      }
      public Builder SetOptional(global::Com.Virtuos.Rocket.NetworkMessage.Player value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOptional = true;
        result.optional_ = value;
        return this;
      }
      public Builder SetOptional(global::Com.Virtuos.Rocket.NetworkMessage.Player.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOptional = true;
        result.optional_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOptional(global::Com.Virtuos.Rocket.NetworkMessage.Player value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOptional &&
            result.optional_ != global::Com.Virtuos.Rocket.NetworkMessage.Player.DefaultInstance) {
            result.optional_ = global::Com.Virtuos.Rocket.NetworkMessage.Player.CreateBuilder(result.optional_).MergeFrom(value).BuildPartial();
        } else {
          result.optional_ = value;
        }
        result.hasOptional = true;
        return this;
      }
      public Builder ClearOptional() {
        PrepareBuilder();
        result.hasOptional = false;
        result.optional_ = null;
        return this;
      }
    }
    static AsyncConnectedRequest() {
      object.ReferenceEquals(global::Com.Virtuos.Rocket.NetworkMessage.AsyncProtos.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AsyncConnectionErrorRequest : pb::GeneratedMessage<AsyncConnectionErrorRequest, AsyncConnectionErrorRequest.Builder> {
    private AsyncConnectionErrorRequest() { }
    private static readonly AsyncConnectionErrorRequest defaultInstance = new AsyncConnectionErrorRequest().MakeReadOnly();
    private static readonly string[] _asyncConnectionErrorRequestFieldNames = new string[] { "code" };
    private static readonly uint[] _asyncConnectionErrorRequestFieldTags = new uint[] { 16 };
    public static AsyncConnectionErrorRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AsyncConnectionErrorRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AsyncConnectionErrorRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Com.Virtuos.Rocket.NetworkMessage.AsyncProtos.internal__static_virtuos_AsyncConnectionErrorRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AsyncConnectionErrorRequest, AsyncConnectionErrorRequest.Builder> InternalFieldAccessors {
      get { return global::Com.Virtuos.Rocket.NetworkMessage.AsyncProtos.internal__static_virtuos_AsyncConnectionErrorRequest__FieldAccessorTable; }
    }
    
    public const int RequestNumberFieldNumber = 407;
    public static pb::GeneratedExtensionBase<global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectionErrorRequest> RequestNumber;
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum ConnectionError {
        UNKNOWN = 0,
        ACCESS_DENIED = 1,
        SERVERFULL_ERROR = 2,
        MAINTENANCE_MODE = 3,
        NEED_AUTHENTICATION = 4,
        UNKNOWN_GAME_TYPE = 5,
        SERVER_ERROR = 6,
        BANNED = 7,
      }
      
    }
    #endregion
    
    public const int CodeFieldNumber = 2;
    private bool hasCode;
    private global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectionErrorRequest.Types.ConnectionError code_ = global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectionErrorRequest.Types.ConnectionError.UNKNOWN;
    public bool HasCode {
      get { return hasCode; }
    }
    public global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectionErrorRequest.Types.ConnectionError Code {
      get { return code_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _asyncConnectionErrorRequestFieldNames;
      if (hasCode) {
        output.WriteEnum(2, field_names[0], (int) Code, Code);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Code);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static AsyncConnectionErrorRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AsyncConnectionErrorRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AsyncConnectionErrorRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AsyncConnectionErrorRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AsyncConnectionErrorRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AsyncConnectionErrorRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AsyncConnectionErrorRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AsyncConnectionErrorRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AsyncConnectionErrorRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AsyncConnectionErrorRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AsyncConnectionErrorRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AsyncConnectionErrorRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AsyncConnectionErrorRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AsyncConnectionErrorRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AsyncConnectionErrorRequest result;
      
      private AsyncConnectionErrorRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          AsyncConnectionErrorRequest original = result;
          result = new AsyncConnectionErrorRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AsyncConnectionErrorRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectionErrorRequest.Descriptor; }
      }
      
      public override AsyncConnectionErrorRequest DefaultInstanceForType {
        get { return global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectionErrorRequest.DefaultInstance; }
      }
      
      public override AsyncConnectionErrorRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AsyncConnectionErrorRequest) {
          return MergeFrom((AsyncConnectionErrorRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AsyncConnectionErrorRequest other) {
        if (other == global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectionErrorRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_asyncConnectionErrorRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _asyncConnectionErrorRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.code_, out unknown)) {
                result.hasCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
       get { return result.hasCode; }
      }
      public global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectionErrorRequest.Types.ConnectionError Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectionErrorRequest.Types.ConnectionError value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = global::Com.Virtuos.Rocket.NetworkMessage.AsyncConnectionErrorRequest.Types.ConnectionError.UNKNOWN;
        return this;
      }
    }
    static AsyncConnectionErrorRequest() {
      object.ReferenceEquals(global::Com.Virtuos.Rocket.NetworkMessage.AsyncProtos.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Session : pb::GeneratedMessage<Session, Session.Builder> {
    private Session() { }
    private static readonly Session defaultInstance = new Session().MakeReadOnly();
    private static readonly string[] _sessionFieldNames = new string[] { "id" };
    private static readonly uint[] _sessionFieldTags = new uint[] { 8 };
    public static Session DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Session DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Session ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Com.Virtuos.Rocket.NetworkMessage.AsyncProtos.internal__static_virtuos_Session__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Session, Session.Builder> InternalFieldAccessors {
      get { return global::Com.Virtuos.Rocket.NetworkMessage.AsyncProtos.internal__static_virtuos_Session__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private long id_;
    public bool HasId {
      get { return hasId; }
    }
    public long Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _sessionFieldNames;
      if (hasId) {
        output.WriteInt64(1, field_names[0], Id);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Session ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Session ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Session ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Session ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Session ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Session ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Session ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Session ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Session ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Session ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Session MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Session prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Session, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Session cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Session result;
      
      private Session PrepareBuilder() {
        if (resultIsReadOnly) {
          Session original = result;
          result = new Session();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Session MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Com.Virtuos.Rocket.NetworkMessage.Session.Descriptor; }
      }
      
      public override Session DefaultInstanceForType {
        get { return global::Com.Virtuos.Rocket.NetworkMessage.Session.DefaultInstance; }
      }
      
      public override Session BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Session) {
          return MergeFrom((Session) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Session other) {
        if (other == global::Com.Virtuos.Rocket.NetworkMessage.Session.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sessionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sessionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt64(ref result.id_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public long Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(long value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0L;
        return this;
      }
    }
    static Session() {
      object.ReferenceEquals(global::Com.Virtuos.Rocket.NetworkMessage.AsyncProtos.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
